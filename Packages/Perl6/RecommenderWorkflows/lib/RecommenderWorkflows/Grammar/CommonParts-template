use v6;

use RecommenderWorkflows::Grammar::FuzzyMatch;

# This role class has common command parts.
role RecommenderWorkflows::Grammar::CommonParts {

  # Speech parts
  token a-determiner { 'a' | 'an'}
  token and-conjunction { 'and' }
  token apply-verb { 'apply' }
  token assign { 'assign' | 'set' }
  token by-preposition { 'by' | 'with' | 'using' }
  token do-verb { 'do' }
  token for-preposition { 'for' | 'with' }
  token from-preposition { 'from' }
  token get-verb { 'obtain' | 'get' | 'take' }
  token object { 'object' }
  token of-preposition { 'of' }
  token per { 'per' }
  token results { 'results' }
  token simple { 'simple' | 'direct' }
  token system { 'system' }
  token the-determiner { 'the' }
  token to-preposition { 'to' | 'into' }
  token transform-verb { 'transform' }
  token use-verb { 'use' | 'utilize' }
  token using-preposition { 'using' | 'with' | 'over' }
  token with-preposition { 'using' | 'with' | 'by' }

  rule for-which-phrase { 'for' 'which' | 'that' 'adhere' 'to' }
  rule number-of { [ 'number' | 'count' ] 'of' }

  # Data
  token dataset { 'dataset' }
  token dataset-name { ([ \w | '_' | '-' | '.' | \d ]+) <!{ $0 eq 'and' }> }
  token variable-name { ([ \w | '_' | '-' | '.' | \d ]+) <!{ $0 eq 'and' }> }

  rule data { <data-frame> | 'data' | <dataset> | <time-series-data> }
  rule data-frame { 'data' 'frame' }
  rule records { 'rows' | 'records' }
  rule time-series-data { 'time' 'series' [ 'data' ]? }

  # Directives
  token classify { 'classify' }
  token compute-directive { 'compute' | 'find' | 'calculate' }
  token create-directive { 'create' | 'make' }
  token diagram { 'plot' | 'plots' | 'graph' | 'chart' }
  token display-directive { 'display' | 'show' | 'echo' }
  token generate-directive { 'generate' | 'create' | 'make' }

  rule compute-and-display { <compute-directive> [ 'and' <display-directive> ]? }
  rule load-data-directive { ( 'load' | 'ingest' ) <.the-determiner>? <data> }
  rule plot-directive { 'plot' | 'chart' | <display-directive> <diagram> }
  rule use-directive { [ <get-verb> <and-conjunction>? ]? <use-verb> }

  # Value types
  token boolean-value { 'True' | 'False' | 'true' | 'false' }
  token integer-value { \d+ }
  token number-value { (\d+ ['.' \d+]?  [ [e|E] \d+]?) }
  token percent { '%' | 'percent' }
  token percent-value { <number-value> <.percent> }

  # Lists of things
  token list-separator-symbol { ',' | '&' | 'and' | ',' \h* 'and' }
  token list-separator { <.ws>? <list-separator-symbol> <.ws>? }
  token list { 'list' }

  # Variables list
  rule variable-names-list { <variable-name>+ % <list-separator> }

  # Number list
  rule number-value-list { <number-value>+ % <list-separator> }

  # Range
  rule range-spec { [ <.from-preposition> <number-value> ] [ <.to-preposition> <number-value> ] [ <.range-spec-step> <number-value> ]? }
  rule range-spec-step { <with-preposition> | <with-preposition>? 'step' }

}